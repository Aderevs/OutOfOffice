@model List<LeaveRequestView>

@{
    ViewData["Title"] = "Leave requests";
    var requestsJson = System.Text.Json.JsonSerializer.Serialize(Model);

}

<a asp-action="Create" class="btn-primary">Create new request +</a>
<table>
    <thead id="leaverequests-table-head">
        <tr>
            <th><button onclick="sortById()">ID</button></th>
            <th><button onclick="sortByReason()">Reason</button></th>
            <th><button onclick="sortByStartDate()">Start</button></th>
            <th><button onclick="sortByEndDate()">End</button></th>
            <th><button onclick="sortByStatus()">Status</button></th>
        </tr>
    </thead>
    <tbody id="leaverequests-table-body"></tbody>
</table>

<script>
    let requests = @Html.Raw(requestsJson);
    let tableBody = document.getElementById("leaverequests-table-body");
    let currentSorting = "IDAscending";

    function displayTableBody() {
        tableBody.innerHTML = "";
        requests.ForEach(request => {
            let row = document.createElement("tr");
            let activeSubmit = '';
            let activeCancel = '';
            let currentStatus;
            switch (request.Status) {
                case 0:
                    currentStatus = "New";
                    activeCancel = 'active';
                    activeSubmit = 'active';
                    break;
                case 1:
                    currentStatus = "Submit";
                    activeCancel = 'disabled';
                    activeSubmit = 'active';
                    break;
                case 2:
                    currentStatus = "Cancel";
                    activeCancel = 'disabled';
                    activeSubmit = 'disabled';
                    break;
                default:
                    currentStatus = "Unknown";
                    break;
            }

            row.innerHTML =
                `<td>${request.ID}</td>
            <td>${request.AbsenceReason}</td>
            <td>${request.StartDate}</td>
            <td>${request.EndDate}</td>
            <td>
                ${currentStatus} 
                <br/>
                <button class="btn btn-success" onclick="Submit(${request.ID})" ${activeSubmit}></button>"
                <button class="btn btn-dander" onclick="Cancel()" ${activeCancel}></button>"
            </td>
            <td><a href="localhost:7129/LeaveRequests/EditRequest?id=${request.ID}>Details / Update</a>"</td>`;
            tableBody.appendChild(row);
        });
    }

    displayTableBody();

    function Submit(id) {
        $.ajax({
            url: `LaveRequests/Submit?Id=${id}`,
            type: 'PATCH',
            })),
            success: function (response) {
                console.log('Request submitted successfully');
                @* // Display the HTML response
                $('#testing-page').html(response); *@
            },
            error: function (xhr, status, error) {
                console.error('Error submitting request: ' + error);
            }
        });
    }
    function Cancel(id) {
        $.ajax({
            url: `LaveRequests/Cancel?Id=${id}`,
            type: 'PATCH',
            })),
            success: function (response) {
                console.log('Request canceled successfully');
                @* // Display the HTML response
                $('#testing-page').html(response); *@
            },
            error: function (xhr, status, error) {
                console.error('Error canceling request: ' + error);
            }
        });
    }

    function sortById() {
        if (currentSorting === "IDAscending") {
            currentSorting = "IDDescending";
            requests.sort((a, b) => b.ID - a.ID);
        } else {
            currentSorting = "IDAscending";
            requests.sort((a, b) => a.ID - b.ID);
        }
        displayTableBody();
    }

    function sortByReason() {
        if (currentSorting === "ReasonAscending") {
            currentSorting = "ReasonDescending";
            requests.sort((a, b) => b.AbsenceReason - a.AbsenceReason);
        } else {
            currentSorting = "ReasonAscending";
            requests.sort((a, b) => a.AbsenceReason - b.AbsenceReason);
        }
        displayTableBody();
    }

    function sortByStartDate() {
        if (currentSorting === "StartAscending") {
            currentSorting = "StartDescending";
            requests.sort((a, b) => b.StartDate - a.StartDate);
        } else {
            currentSorting = "StartAscending";
            requests.sort((a, b) => a.StartDate - b.StartDate);
        }
        displayTableBody();
    }

    function sortByEndDate() {
        if (currentSorting === "EndAscending") {
            currentSorting = "EndDescending";
            requests.sort((a, b) => b.EndDate - a.EndDate);
        } else {
            currentSorting = "EndAscending";
            requests.sort((a, b) => a.EndDate - b.EndDate);
        }
        displayTableBody();
    }

    function sortByStatus() {
        if (currentSorting === "StatusAscending") {
            currentSorting = "StatusDescending";
            requests.sort((a, b) => b.Status - a.Status);
        } else {
            currentSorting = 'StatusAscending';
            requests.sort((a, b) => a.Status - b.Status);
        }
        displayTableBody();
    }

</script>
