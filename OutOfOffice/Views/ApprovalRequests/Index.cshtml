@model List<ApprovalRequestView>

@{
    ViewData["Title"] = "Approval requests";
    var requestsJson = System.Text.Json.JsonSerializer.Serialize(Model);

}

 <table class="tables">
    <thead id="approvalrequests-table-head">
        <tr>
            <th><button class="btn" onclick="sortById()">ID</button></th>
            <th><button class="btn" onclick="sortByReason()">Reason</button></th>
            <th><button class="btn" onclick="sortByStartDate()">Start</button></th>
            <th><button class="btn" onclick="sortByEndDate()">End</button></th>
            <th><button class="btn" onclick="sortByStatus()">Status</button></th>
        </tr>
    </thead>
    <tbody id="approvalrequests-table-body"></tbody>
</table>

<script>
    let requests = @Html.Raw(requestsJson);
    let tableBody = document.getElementById("approvalrequests-table-body");
    let currentSorting = "IDAscending";

    function displayTableBody() {
        tableBody.innerHTML = "";
        requests.forEach(function (request) {
            let row = document.createElement("tr");
            let activeSubmit = '';
            let activeCancel = '';
            switch (request.Status) {
                case 'New':
                    activeCancel = 'active';
                    activeSubmit = 'active';
                    break;
                case 'Submit':
                    activeCancel = 'active';
                    activeSubmit = 'disabled';
                    break;
                case 'Cancel':
                    activeCancel = 'disabled';
                    activeSubmit = 'disabled';
                    break;
                default:
                    break;
            }
            
            row.innerHTML =
                `<td>${request.ID}</td>
                <td>${request.AbsenceReason}</td>
                <td>${request.StartDate}</td>
                <td>${request.EndDate}</td>
                <td>
                    ${request.Status}
                    <br/>
                    <button class="btn btn-success" onclick="Submit(${request.ID})" ${activeSubmit}>Approve</button>
                </td>
                    <td><a href="https://localhost:7129/ApprovalRequests/certain?id=${request.ID}">Details</a></td>`;
            tableBody.appendChild(row);
        });
    }

    displayTableBody();

    function Submit(id) {
        const url = `ApprovalRequests/Approve?id=${id}`;
        const options = {
            method: 'PATCH',
        };
        fetch(url, options)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
            })
            .then(data => {

                for (let i = 0; i < requests.length; i++) {
                    if (requests[i].ID === id) {
                        requests[i].Status = "Submit";
                        break;
                    }
                }
                displayTableBody();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function sortById() {
        if (currentSorting === "IDAscending") {
            currentSorting = "IDDescending";
            requests.reverse();
        } else {
            currentSorting = "IDAscending";
            requests.sort((a, b) => a.ID - b.ID);
        }
        displayTableBody();
    }

    function sortByReason() {
        if (currentSorting === "ReasonAscending") {
            currentSorting = "ReasonDescending";
            requests.reverse();
        } else {
            currentSorting = "ReasonAscending";
            requests.sort((a, b) => a.LeaveRequest.localeCompare(b.AbsenceReason));
        }
        displayTableBody();
    }

    function sortByStartDate() {
        if (currentSorting === "StartAscending") {
            currentSorting = "StartDescending";
            requests.reverse();
        } else {
            currentSorting = "StartAscending";
            requests.sort((a, b) => a.StartDate.localeCompare(b.StartDate));
        }
        displayTableBody();
    }

    function sortByEndDate() {
        if (currentSorting === "EndAscending") {
            currentSorting = "EndDescending";
            requests.reverse();
        } else {
            currentSorting = "EndAscending";
            requests.sort((a, b) => a.LeaveRequest.localeCompare(b.EndDate));
        }
        displayTableBody();
    }

    function sortByStatus() {
        if (currentSorting === "StatusAscending") {
            currentSorting = "StatusDescending";
            requests.reverse();
        } else {
            currentSorting = 'StatusAscending';
            requests.sort((a, b) => a.Status.localeCompare(b.Status));
        }
        displayTableBody();
    }

</script>
