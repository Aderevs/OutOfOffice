@model List<ProjectView>
@{
    ViewData["Title"] = "Projects";
    var projectsJson = System.Text.Json.JsonSerializer.Serialize(Model);
}
@if (User.IsInRole("ProjectManager"))
{
    <a asp-action="Create" class="btn btn-primary">Add new project +</a>
}
<table class="tables">
    <thead id="projects-table-head">
        <tr>
            <th><button class="btn" onclick="sortById()">ID</button></th>
            <th><button class="btn" onclick="sortByType()">Type</button></th>
            <th><button class="btn" onclick="sortByStartDate()">Start</button></th>
            <th><button class="btn" onclick="sortByEndDate()">End</button></th>
            @if (!User.IsInRole("ProjectManager"))
            {
                <th><button class="btn" onclick="sortByPMName()">PM</button></th>
            }
            <th><button class="btn" onclick="sortByActiveStatus()">Is Active</button></th>
        </tr>
    </thead>
    <tbody id="projects-table-body"></tbody>
</table>

<script>
    let projects = @Html.Raw(projectsJson);
    let tableBody = document.getElementById("projects-table-body");
    let currentSorting = "IDAscending";

    function displayTableBody() {
        tableBody.innerHTML = "";
        projects.forEach(function (project) {
            let row = document.createElement("tr");
            row.innerHTML =
                `<td>${project.ID}</td>
                    <td>${project.ProjectType}</td>
                    <td>${project.StartDate}</td>
                    <td>${project.EndDate}</td>
                    @if (!User.IsInRole("ProjectManager"))
                    {
                        <td>${project.ProjectManagerName}</td>
                    }
                    <td>
                        ${project.IsActive}
                        <br/>
                        <button class="btn btn-warning" onclick="CangeStatus(${project.ID})">CangeStatus</button>
                    </td>
                        <td><a href="https://localhost:7129/Projects/Certain?id=${project.ID}">Details</a></td>`;
            tableBody.appendChild(row);
        });
    }

    displayTableBody();


    function sortById() {
        if (currentSorting === "IDAscending") {
            currentSorting = "IDDescending";
            projects.reverse();
        } else {
            currentSorting = "IDAscending";
            projects.sort((a, b) => a.ID - b.ID);
        }
        displayTableBody();
    }

    function sortByType() {
        if (currentSorting === "TypeAscending") {
            currentSorting = "TypeDescending";
            projects.reverse();
        } else {
            currentSorting = "TypeAscending";
            projects.sort((a, b) => a.ProjectType.localeCompare(b.ProjectType));
        }
        displayTableBody();
    }


    function sortByStartDate() {
        if (currentSorting === "StartAscending") {
            currentSorting = "StartDescending";
            projects.reverse();
        } else {
            currentSorting = "StartAscending";
            projects.sort((a, b) => a.StartDate.localeCompare(b.StartDate));
        }
        displayTableBody();
    }

    function sortByEndDate() {
        if (currentSorting === "EndAscending") {
            currentSorting = "EndDescending";
            projects.reverse();
        } else {
            currentSorting = "EndAscending";
            projects.sort((a, b) => a.EndDate.localeCompare(b.EndDate));
        }
        displayTableBody();
    }

    function sortByPMName() {
        if (currentSorting === "PMNameAscending") {
            currentSorting = "PMNameDescending";
            projects.reverse();
        } else {
            currentSorting = "PMNameAscending";
            projects.sort((a, b) => a.ProjectManagerName.localeCompare(b.ProjectManagerName));
        }
        displayTableBody();
    }

    function sortByActiveStatus() {
        if (currentSorting === "StatusAscending") {
            currentSorting = "StatusDescending";
            projects.reverse();
        } else {
            currentSorting = 'StatusAscending';
            projects.sort((a, b) => a.IsActive - b.IsActive);
        }
        displayTableBody();
    }
    function CangeStatus(id) {
        const url = `Projects/ChangeStatus?id=${id}`;
        const options = {
            method: 'PATCH',
        };
        fetch(url, options)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                for (let i = 0; i < projects.length; i++) {
                    if (projects[i].ID === id) {
                        projects[i].IsActive = data;
                        break;
                    }
                }
                displayTableBody();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
</script>