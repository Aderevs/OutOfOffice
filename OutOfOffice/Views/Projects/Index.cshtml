@model List<ProjectView>
@{
    ViewData["Title"] = "Projects";
    var projectsJson = System.Text.Json.JsonSerializer.Serialize(Model);
}

<table class="tables">
    <thead id="projects-table-head">
        <tr>
            <th><button class="btn" onclick="sortById()">ID</button></th>
            <th><button class="btn" onclick="sortByType()">Type</button></th>
            <th><button class="btn" onclick="sortByStartDate()">Start</button></th>
            <th><button class="btn" onclick="sortByEndDate()">End</button></th>
            <th><button class="btn" onclick="sortByPMName()">PM</button></th>
            <th><button class="btn" onclick="sortByActiveStatus()">Is Active</button></th>
        </tr>
    </thead>
    <tbody id="projects-table-body"></tbody>
</table>

<script>
    let projects = @Html.Raw(projectsJson);
    let tableBody = document.getElementById("projects-table-body");
    let currentSorting = "IDAscending";

    function displayTableBody() {
        tableBody.innerHTML = "";
        projects.forEach(function (project) {
            let row = document.createElement("tr");
    @* let activeSubmit = '';
                let activeCancel = '';
                switch (request.Status) {
                case 'New':
                activeCancel = 'active';
                activeSubmit = 'active';
                break;
                case 'Submit':
                activeCancel = 'active';
                activeSubmit = 'disabled';
                break;
                case 'Cancel':
                activeCancel = 'disabled';
                activeSubmit = 'disabled';
                break;
                default:
                break;
                } *@

                row.innerHTML =
            `<td>${project.ID}</td>
                <td>${project.ProjectType}</td>
                <td>${project.StartDate}</td>
                <td>${project.EndDate}</td>
                <td>${project.ProjectManager.FullName}</td>
                <td>${project.IsActive}</td>
                    <td><a href="https://localhost:7129/Projects/Certain?id=${project.ID}">Details</a></td>`;
            tableBody.appendChild(row);
        });
    }

    displayTableBody();


    function sortById() {
        if (currentSorting === "IDAscending") {
            currentSorting = "IDDescending";
            projects.reverse();
        } else {
            currentSorting = "IDAscending";
            projects.sort((a, b) => a.ID - b.ID);
        }
        displayTableBody();
    }

    function sortByType() {
        if (currentSorting === "TypeAscending") {
            currentSorting = "TypeDescending";
            projects.reverse();
        } else {
            currentSorting = "TypeAscending";
            projects.sort((a, b) => a.ProjectType.localeCompare(b.ProjectType));
        }
        displayTableBody();
    }


    function sortByStartDate() {
        if (currentSorting === "StartAscending") {
            currentSorting = "StartDescending";
            projects.reverse();
        } else {
            currentSorting = "StartAscending";
            projects.sort((a, b) => a.StartDate.localeCompare(b.StartDate));
        }
        displayTableBody();
    }

    function sortByEndDate() {
        if (currentSorting === "EndAscending") {
            currentSorting = "EndDescending";
            projects.reverse();
        } else {
            currentSorting = "EndAscending";
            projects.sort((a, b) => a.LeaveRequest.localeCompare(b.EndDate));
        }
        displayTableBody();
    }

    function sortByPMName(){
        if (currentSorting === "PMNameAscending") {
            currentSorting = "PMNameDescending";
            projects.reverse();
        } else {
            currentSorting = "PMNameAscending";
            projects.sort((a, b) => a.ProjectManager.FullName.localeCompare(b.ProjectManager.FullName));
        }
        displayTableBody();
    }

    function sortByActiveStatus() {
        if (currentSorting === "StatusAscending") {
            currentSorting = "StatusDescending";
            projects.reverse();
        } else {
            currentSorting = 'StatusAscending';
            projects.sort((a, b) => a.IsActive - b.IsActive);
        }
        displayTableBody();
    }
</script>